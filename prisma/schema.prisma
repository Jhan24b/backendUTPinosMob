// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://jhan24b:g9PPttbn15QspVlx@cluster0.khzjr44.mongodb.net/UTPinos?retryWrites=true&w=majority&appName=Cluster0"
}

model Malla {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  cod         String        @unique
  carrera     String
  year        Int
  CursosMalla CursosMalla[]
}

model CursosMalla {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  Malla   Malla   @relation(fields: [idMalla], references: [id])
  idMalla String  @db.ObjectId
  cursos  Curso[]
}

model Curso {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  cod              String             @unique
  nombre           String
  creditos         Int
  horas            Int
  semestre         Int
  CursosMalla      CursosMalla?       @relation(fields: [cursosMallaId], references: [id])
  cursosMallaId    String?            @db.ObjectId
  CursoMatriculado CursoMatriculado[]
}

model CursoMatriculado {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  averageGrade         Float
  salon                String
  profesor             String
  curso                Curso               @relation(fields: [idCurso], references: [id])
  idCurso              String              @db.ObjectId
  vez                  Int
  status               String
  PeriodoMatriculado   PeriodoMatriculado? @relation(fields: [periodoMatriculadoId], references: [id])
  periodoMatriculadoId String?             @db.ObjectId
  notas                Nota[]
  diasClase            Int[]
  horaInicio           DateTime
}

model Nota {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  nombre          String
  calificacion    Float
  peso            Float
  cursoMatriculado CursoMatriculado  @relation(fields: [cursoMatriculadoId], references: [id])
  cursoMatriculadoId String          @db.ObjectId
}

model Pagos {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  cod                  String              @unique
  descripcion          String
  monto                Float
  fechaVencimiento     DateTime
  estado               String
  urlRecibo            String?
  tipo                 String
  Usuario              Usuario?            @relation(fields: [usuarioId], references: [id])
  usuarioId            String?             @db.ObjectId
  PeriodoMatriculado   PeriodoMatriculado? @relation(fields: [periodoMatriculadoId], references: [id])
  periodoMatriculadoId String?             @db.ObjectId
}

  model Servicios {
    id                  String                @id @default(auto()) @map("_id") @db.ObjectId
    nombre              String
    tipo                String
    fechas              DateTime[]
    ServiciosUtilizados ServiciosUtilizados[]
  }

model Tramites {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  nombre             String
  tipo               String
  costo              Float?
  requisitos         String[]
  descripcion        String
  TramitesRealizados TramitesRealizados[]
}

model PeriodoMatriculado {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  semestre           Int
  periodo            String
  Usuario            Usuario?           @relation(fields: [idUsuario], references: [id])
  idUsuario          String?            @db.ObjectId
  Pagos              Pagos[]
  cursosMatriculados CursoMatriculado[]
}

model Usuario {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  nombre              String
  email               String                @unique
  carrera             String
  password            String?
  TramitesRealizados  TramitesRealizados[]
  ServiciosUtilizados ServiciosUtilizados[]
  Pagos               Pagos[]
  PeriodoMatriculado  PeriodoMatriculado[]
  image               String?               // Para guardar la imagen de perfil de Google
  emailVerified       DateTime?             // Para almacenar si el email ha sido verificado
  accounts            Account[]             // Relación con la tabla de cuentas
  sessions            Session[]             // Relación con la tabla de sesiones
  events              Event[]
  tasks               Task[]
}

model Account {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userId            String    @map("user_id")
  provider          String
  providerAccountId String
  type              String
  access_token      String?   
  refresh_token     String?   
  expires_at        Int?
  scope             String?
  id_token          String?   
  token_type        String?
  user              Usuario   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TramitesRealizados {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  tramite     Tramites? @relation(fields: [idTramite], references: [id])
  idTramite   String?   @db.ObjectId
  Usuario     Usuario?  @relation(fields: [idUsuario], references: [id])
  idUsuario   String?   @db.ObjectId
  fechas      DateTime?
  documentos  String[]
  estado      String?
  adicional   String?
}

model ServiciosUtilizados {
  id                    String     @id @default(auto()) @map("_id") @db.ObjectId
  servicio              Servicios? @relation(fields: [idServicio], references: [id])
  idServicio            String?    @db.ObjectId
  Usuario               Usuario?   @relation(fields: [idUsuario], references: [id])
  idUsuario             String?    @db.ObjectId
  fechaRegistro         DateTime?
  horarioElegido        DateTime?
  estado                String?
}

model confirmacionPago {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  userId          String
  amount          Int
  currency        String
  paymentStatus   String
  sessionId       String
  receiptUrl      String?
  createdAt       DateTime @default(now())
}

model Event {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  description      String?
  start            DateTime
  end              DateTime
  isAllDay         Boolean  @default(false)
  notificationTime Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  Usuario               Usuario?   @relation(fields: [idUsuario], references: [id])
  idUsuario             String?    @db.ObjectId
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completed   Boolean  @default(false)
  Usuario               Usuario?   @relation(fields: [idUsuario], references: [id])
  idUsuario             String?    @db.ObjectId
}